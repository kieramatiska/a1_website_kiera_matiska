[
  {
    "path": "posts/2022-03-21-spatial/",
    "title": "California Oil Spills Spatial Data Analysis",
    "description": "My Spatial Visualization Skills on Display.",
    "author": [
      {
        "name": "Kiera Matiska",
        "url": {}
      }
    ],
    "date": "2022-03-17",
    "categories": [],
    "contents": "\nOverview\nThis code will provide information on oil spills and their location throughout California State. A t-map will be produced as an interactive mode of exploring the data and a second static choropleth graph will be used to show a larger picture of the data within each county.\nCitation\nCalifornia Department of Fish and Game & Office of Spill Prevention and Response. (20089, July 23). Oil Spill Incident Tracking. Digital map and vector digital data. https://map.dfg.ca.gov/metadata/ds0394.html#ID0EUGA\nSet-Up\n\n\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\n# attach packages\nlibrary(tidyverse)\nlibrary(here)\nlibrary(maptools)\nlibrary(sf)\nlibrary(tmap)\nlibrary(tmaptools)\nlibrary(janitor)\n\n\n\nCalifornia Oil Spill Maps\nT-map\n\n\noil_spills_sf <- read_sf(here(\"data/ds394/ds394.shp\")) %>% # read in shape file\n  clean_names() %>% \n  st_transform(3310) # transform coordinate system\n\nca_counties <- read_sf(here(\"data/CA_Counties/CA_Counties_TIGER2016.shp\")) %>% # read in shape file\n  clean_names() %>% \n  st_transform(3310) # transform coordinate system\n\ntmap_mode(mode = \"view\") # interactive t-map option\ntmap_options(check.and.fix = TRUE,\n             max.categories = 58)\n\ntm_shape(ca_counties) + # start by using CA counties\n  tm_fill(\"aland\", # fill by land area\n          palette = \"BuGn\", \n          popup.vars = c(\"County:\" = \"namelsad\")) + # add a popup variable\n  tm_borders(col = \"black\") + # add borders around the counties\ntm_shape(oil_spills_sf) + # add another layer\n  tm_dots(popup.vars = c(\"Control Number:\" = \"oesnumber\", # add more popup variables\n                         \"Date:\" = \"dateofinci\", \n                         \"Time:\" = \"timeofinci\", \n                         \"County:\" = \"localecoun\", \n                         \"City:\" = \"localecity\", \n                         \"Type of Water:\" = \"specificlo\",\n                         \"Inland or Marine:\" = \"inlandmari\"),\n          size = 0.02) # change size of points\n\n\n\n",
    "preview": "posts/2022-03-21-spatial/spatial_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-03-21T23:42:08-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-03-21-hamilton/",
    "title": "Text Analysis of the Musical: Hamilton",
    "description": "My Text Analysis Skills on Display.",
    "author": [
      {
        "name": "Kiera Matiska",
        "url": {}
      }
    ],
    "date": "2022-03-15",
    "categories": [],
    "contents": "\nIntroduction\nOn July 13, 2015, the musical Hamilton, written by Lin-Manuel Miranda, premiered at the Richard Rogers Theater on Broadway. It received critical acclaim and the musical was nominated 16 times for Tony award categories and won in 11 categories. The musical was also awarded the 2016 Pulitzer Prize for Drama. It instantly became a smashing hit, with people all around the globe not only listening to the music, but striving to see it in person.\nThe musical tells the story of the Founding Father Alexander Hamilton, with the music heavy on hip-hop, R&B, rap, and soul. It is split into two acts that explore his life before becoming a major political figure and after. The musical encounters other important historical characters, such as George Washington, Thomas Jefferson, and Aaron Burr.\nHere is the original broadway cast:\nAlexander Hamilton: Lin-Manuel Miranda\nAaron Burr: Leslie Odom Jr.\nEliza Hamilton: Phillipa Soo\nAngelica Schuyler: Ren√©e Elise Goldsberry\nMarquis de Lafayette & Thomas Jefferson: Daveed Diggs\nGeorge Washington: Christopher Jackson\nJohn Laurens & Philip Hamilton: Anthony Ramos\nHercules Mulligan & James Madison: Okieriete Onaodowan\nKing George III: Johnathon Groff\nPeggy Schuyler & Maria Reynolds: Jasmine Cephas Jones\nThis code will provide a text analysis on the lyrics of each song between the two acts. Word counts will be assessed, the top 5 most frequently used words per song will be graphed. Additionally, two word clouds will be generated based on the most frequent 100 words in each act. Finally, a sentiment analysis will be ran, comparing the attitudes and opinions expressed throughout each song between the two acts.\n\n\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\n# attach packages\nlibrary(tidyverse)\nlibrary(here)\nlibrary(tidytext)\nlibrary(textdata)\nlibrary(pdftools)\nlibrary(ggwordcloud)\nlibrary(paletteer)\n\n\n\n\n## read in lyrics for act 1 and 2\nham_act1 <- pdf_text(here(\"data\", \"hamilton_act1.pdf\")) # read in act 1 lyrics\n\nham_act2 <- pdf_text(here(\"data\", \"hamilton_act2.pdf\")) # read in act 2 lyrics\n\n## convert text to a data frame\nact1_lines <- data.frame(ham_act1) %>% # create a data frame using act 1 lyrics\n  mutate(page = 1:n()) %>% # define all pages in the text\n  mutate(text_act1 = str_split(ham_act1, pattern = \"\\\\n\")) %>% # create a new row with every new line\n  unnest(text_act1) %>% \n  mutate(text_act1 = str_trim(text_act1))\n\nact2_lines <- data.frame(ham_act2) %>% # create a data frame using act 2 lyrics\n  mutate(page = 1:n()) %>% # define all pages in the text\n  mutate(text_act2 = str_split(ham_act2, pattern = \"\\\\n\")) %>% # create a new row with every new line\n  unnest(text_act2) %>% \n  mutate(text_act2 = str_trim(text_act2))\n\n## do some tidying\ntunes_act1 <- act1_lines %>% # create a tunes data frame\n  mutate(song = ifelse(str_detect(text_act1, \"Song\"), text_act1, NA)) %>% # create a song column\n  fill(song, .direction = \"down\") %>% # fill down to create rows\n  separate(col = song, into = c(\"so\", \"no\"), sep = \" \") %>% # create new columns with song in one and number in the other\n  mutate(song = as.numeric(as.roman(no))) # number column as roman numeral\n\ntunes_act2 <- act2_lines %>% # create a tunes data frame\n  mutate(song = ifelse(str_detect(text_act2, \"Song\"), text_act2, NA)) %>% # create a song column\n  fill(song, .direction = \"down\") %>% # fill down to create rows\n  separate(col = song, into = c(\"so\", \"no\"), sep = \" \") %>% # create new columns with song in one and number in the other\n  mutate(song = as.numeric(as.roman(no))) # number column as roman numeral\n\n\n\n\n## Find word counts of each act separated by song\n# unnest the words in each column of the act 1 text\nwords_act1 <- tunes_act1 %>% \n  unnest_tokens(word, text_act1) %>% \n  select(-ham_act1)\n\n# unnest the words in each column of the act 2 text\nwords_act2 <- tunes_act2 %>% \n  unnest_tokens(word, text_act2) %>% \n  select(-ham_act2)\n\n# find word count of act 1 separated by song\nact1_wordcount <- words_act1 %>% \n  count(song, word)\n\n# find word count of act 2 separated by song\nact2_wordcount <- words_act2 %>% \n  count(song, word)\n\n## Remove stop words\n# Remove stop words in act 1\nwords_act1_clean <- words_act1 %>% \n  anti_join(stop_words, by = \"word\") %>% \n  mutate(song_name = case_when(\n    song == \"1\" ~ \"Alexander Hamilton\", # rename song 1\n    song == \"2\" ~ \"Aaron Burr, Sir\", # rename song 2\n    song == \"3\" ~ \"My Shot\", # rename song 3\n    song == \"4\" ~ \"The Story of Tonight\", # rename song 4\n    song == \"5\" ~ \"The Schuyler Sisters\", # rename song 5\n    song == \"6\" ~ \"Farmer Refuted\", # rename song 6\n    song == \"7\" ~ \"You'll Be Back\", # rename song 7\n    song == \"8\" ~ \"Right Hand Man\", # rename song 8\n    song == \"9\" ~ \"A Winter's Ball\", # rename song 9\n    song == \"10\" ~ \"Helpless\", # rename song 10\n    song == \"11\" ~ \"Satisfied\", # rename song 11\n    song == \"12\" ~ \"The Story of \\nTonight (Reprise)\", # rename song 12\n    song == \"13\" ~ \"Wait for It\", # rename song 13\n    song == \"14\" ~ \"Stay Alive\", # rename song 14\n    song == \"15\" ~ \"Ten Duel Commandments\", # rename song 15\n    song == \"16\" ~ \"Meet Me Inside\", # rename song 16\n    song == \"17\" ~ \"That Would Be Enough\", # rename song 17\n    song == \"18\" ~ \"Guns and Ships\", # rename song 18\n    song == \"19\" ~ \"History Has Its Eyes on You\", # rename song 19\n    song == \"20\" ~ \"Yorktown (The World \\nTurned Upside Down)\", # rename song 20\n    song == \"21\" ~ \"What Comes Next?\", # rename song 21\n    song == \"22\" ~ \"Dear Theodosia\", # rename song 22\n    song == \"23\" ~ \"Non-Stop\" # rename song 23\n  ))\n\n# remove stop words in act 2\nwords_act2_clean <- words_act2 %>% \n  anti_join(stop_words, by = \"word\") %>% \n  mutate(song_name = case_when(\n    song == \"1\" ~ \"What'd I Miss\", # rename song 1\n    song == \"2\" ~ \"Cabinet Battle #1\", # rename song 2\n    song == \"3\" ~ \"Take a Break\", # rename song 3\n    song == \"4\" ~ \"Say No to This\", # rename song 4\n    song == \"5\" ~ \"The Room Where It Happens\", # rename song 5\n    song == \"6\" ~ \"Schuyler Defeated\", # rename song 6\n    song == \"7\" ~ \"Cabinet Battle #2\", # rename song 7\n    song == \"8\" ~ \"Washington on Your Side\", # rename song 8\n    song == \"9\" ~ \"One Last Time\", # rename song 9\n    song == \"10\" ~ \"I Know Him\", # rename song 10\n    song == \"11\" ~ \"The Adams Administration\", # rename song 11\n    song == \"12\" ~ \"We Know\", # rename song 12\n    song == \"13\" ~ \"Hurricane\", # rename song 13\n    song == \"14\" ~ \"The Reynolds Pamphlet\", # rename song 14\n    song == \"15\" ~ \"Burn\", # rename song 15\n    song == \"16\" ~ \"Blow Us All Away\", # rename song 16\n    song == \"17\" ~ \"Stay Alive - Reprise\", # rename song 17\n    song == \"18\" ~ \"It's Quiet Uptown\", # rename song 18\n    song == \"19\" ~ \"The Election of 1800\", # rename song 19\n    song == \"20\" ~ \"Your Obedient Servant\", # rename song 20\n    song == \"21\" ~ \"Best of Wives and \\nBest of Women\", # rename song 21\n    song == \"22\" ~ \"The World Was Wide Enough\", # rename song 22\n    song == \"23\" ~ \"Who Lives, Who Dies, \\nWho Tells Your Story\" # rename song 23\n  ))\n\n# find word counts without stop words in act 1\nact1_nonstop_counts <- words_act1_clean %>% \n  count(song, song_name, word)\n\n# find word counts without stop words in act 2\nact2_nonstop_counts <- words_act2_clean %>% \n  count(song, song_name, word)\n\n\nFind top 5 words from each song in each Act\n\n\n# top 5 words in act 1\nact1_top5_words <- act1_nonstop_counts %>%\n  group_by(song) %>%\n  arrange(-n) %>% # arrange by decreasing number\n  slice(1:5) %>% # choose top 5 words in each song\n  ungroup() # stop grouping by song\n\n# top 5 words in act 2\nact2_top5_words <- act2_nonstop_counts %>%\n  group_by(song) %>%\n  arrange(-n) %>% # arrange by decreasing number\n  slice(1:5) %>% # choose top 5 words in each song\n  ungroup() # stop grouping by song\n\n\nAct 1\nSongs 1-6\n\n\n# graph the top 5 words in song 1-6\nact1_1_6 <- act1_top5_words %>% \n  filter(song %in% c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) # filter for songs 1-6\n\nggplot(data = act1_1_6, # specify data\n       aes(x = n, y = fct_reorder(word, n))) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  facet_wrap(~song_name, scales = \"free\") + #separate by song\n  labs(title = \"Top 5 Words in Songs 1-6 in Hamilton: Act 1\", # add title\n       x = \"Count\", # add x-axis label\n       y = \"Word\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 1. Top 5 Words in Songs 1-6 in Hamilton: Act 1. Between these 6 songs, the most frequently used word (‚Äúshot‚Äù) was counted 37 times in the song My Shot, featuring Hamilton, Laurens, Lafayette, Mulligan, Burr, and Company.\nSongs 7 - 12\n\n\nact1_7_12 <- act1_top5_words %>% \n  filter(song %in% c(\"7\", \"8\", \"9\", \"10\", \"11\", \"12\")) # filter for songs 7-12\n\nggplot(data = act1_7_12, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 7-12 in Hamilton: Act 1\", # add title\n       x = \"Count\", # add x-axis label\n       y = \"Word\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 2. Top 5 Words in Songs 7-12 in Hamilton: Act 1. Between these 6 songs, the most frequently used word (‚Äúda‚Äù) was counted 76 times in the song You‚Äôll Be Back, featuring King George III and Company.\nSongs 13-18\n\n\nact1_13_18 <- act1_top5_words %>% \n  filter(song %in% c(\"13\", \"14\", \"15\", \"16\", \"17\", \"18\")) # filter for songs 13-18\n\nggplot(data = act1_13_18, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors + # hide legend\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 13-18 in Hamilton: Act 1\", # add title\n       x = \"Count\", # add x-axis label\n       y = \"Word\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change background color\n\n\n\nFigure 3. Top 5 Words in Songs 13-18 in Hamilton: Act 1. Between these 6 songs, the most frequently used word (‚Äúwait‚Äù) was counted 33 times in the song Wait For It, featuring Aaron Burr and Company.\nSongs 19-23\n\n\nact1_19_23 <- act1_top5_words %>% \n  filter(song %in% c(\"19\", \"20\", \"21\", \"22\", \"23\")) # filter for songs 19-23\n\nggplot(data = act1_19_23, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors + # hide legend\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 19-23 in Hamilton: Act 1\", # add title\n       x = \"Count\", # add x-axis label\n       y = \"Word\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 4. Top 5 Words in Songs 19-23 in Hamilton: Act 1. Between these 5 songs, the most frequently used word (‚Äútime‚Äù) was counted 14 times in the song Non-Stop, featuring Burr, Hamilton, Angelica, Eliza, Washington, and Company.\nAct 2\nSongs 1-6\n\n\nact2_1_6 <- act2_top5_words %>% \n  filter(song %in% c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) # filter for songs 1-6\n\nggplot(data = act2_1_6, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 1-6 in Hamilton: Act 2\", # add title\n       x = \"Count\", # change x-axis label\n       y = \"Word\") + # change y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 5. Top 5 Words in Songs 1-6 in Hamilton: Act 2. Between these 6 songs, the most frequently used word (‚Äúhappened‚Äù) was counted 20 times in the song The Room Where It Happens, featuring Burr, Hamilton, Jefferson, Madison, and Company.\nSongs 7-12\n\n\nact2_7_12 <- act2_top5_words %>% \n  filter(song %in% c(\"7\", \"8\", \"9\", \"10\", \"11\", \"12\")) # filter for songs 6-12\n\nggplot(data = act2_7_12, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors# hide legend\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 7-12 in Hamilton: Act 2\", # add title\n       x = \"Count\", # change x-axis label\n       y = \"Word\") + # change y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 6. Top 5 Words in Songs 7-12 in Hamilton: Act 2. Between these 6 songs, the most frequently used word (‚Äúnice‚Äù) was counted 16 times in the song Washington on Your Side, featuring Burr, Jefferson, Madison, and Company.\nSongs 13-18\n\n\nact2_13_18 <- act2_top5_words %>% \n  filter(song %in% c(\"13\", \"14\", \"15\", \"16\", \"17\", \"18\")) # filter for songs 13-18\n\nggplot(data = act2_13_18, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 13-18 in Hamilton: Act 2\", # add title\n       x = \"Count\", # change x-axis label\n       y = \"Word\") + # change y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 7. Top 5 Words in Songs 13-18 in Hamilton: Act 2. Between these 6 songs, the most frequently used word (‚Äúpresident‚Äù) was counted 16 times in the song The Reynolds Pamphlet, featuring Jefferson, Madison, Burr, Hamilton, Angelica, James Reynolds, and Company.\nSongs 19-23\n\n\nact2_19_23 <- act2_top5_words %>% \n  filter(song %in% c(\"19\", \"20\", \"21\", \"22\", \"23\")) # filter for songs 19-23\n\nggplot(data = act2_19_23, # specify data\n       aes(x = n, y = word)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + #define column graph and change color\n  facet_wrap(~song_name, scales = \"free\") + # separate by song\n  labs(title = \"Top 5 Words in Songs 19-23 in Hamilton: Act 2\", # add title\n       x = \"Count\", # change x-axis label\n       y = \"Word\") + # change y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # change plot color\n\n\n\nFigure 8. Top 5 Words in Songs 19-23 in Hamilton: Act 2. Between these 5 songs, the most frequently used word (‚Äúburr‚Äù) was counted 18 times in the song The Election of 1800, featuring Jefferson, Madison, Burr, Hamilton, and Company.\nWord clouds of top 100 words in each act\n\n\nact1_top100 <- act1_nonstop_counts %>% \n  arrange(-n) %>% # arrange counts in descending order\n  slice(1:100) # choose top 100 only\n\nact2_top100 <- act2_nonstop_counts %>% \n  arrange(-n) %>% # arrange counts in descending order\n  slice(1:100) # choose top 100 only\n\n\nAct 1\n\n\nggplot(data = act1_top100, # specify data\n                     aes(label = word)) +\n  geom_text_wordcloud(aes(color = n, size = n), # define color and size\n                      shape = \"pentagon\", # change word cloud shape\n                      eccentricity = 0.4) +\n  scale_size_area(max_size = 9) + # change size of word cloud\n  scale_color_gradientn(colors = c(\"darkgreen\", \"blue\", \"purple\")) + # change colors\n  theme_minimal() + # theme minimal\n  labs(title = \"Word Cloud of Top 100 Words From Hamilton: Act 1\") # add a title\n\n\n\nFigure 9. Word Cloud of Top 100 Words From Hamilton: Act 1. Between all the songs in Act 1, the most frequently used word (‚Äúda‚Äù) was counted 76 times in the song You‚Äôll Be Back, featuring King George III and Company.\nAct 2\n\n\nggplot(data = act2_top100, # specify data\n                     aes(label = word)) +\n  geom_text_wordcloud(aes(color = n, size = n), # define color and size\n                      shape = \"pentagon\") + # change word cloud shape\n  scale_color_gradientn(colors = c(\"darkgreen\", \"blue\", \"purple\")) + # change colors\n  scale_size_area(max_size = 6) + # change size of word cloud\n  theme_minimal() + # minimal theme\n  labs(title = \"Word Cloud of Top 100 Words From Hamilton: Act 2\") # add a title\n\n\n\nFigure 10. Word Cloud of Top 100 Words From Hamilton: Act 2. Between all the songs in Act 2, the most frequently used word (‚Äúhappened‚Äù) was counted 20 times in the song The Room Where It Happens, featuring Burr, Hamilton, Jefferson, Madison, and Company.\nSentiment Analysis\n‚Äúafinn‚Äù Lexicon\nAct 1 Mean\n\n\nact1_afinn <- words_act1_clean %>% \n  inner_join(get_sentiments(\"afinn\"), by = \"word\") # get sentiments in act 1\n\nact1_afinn_means <- act1_afinn %>% \n  group_by(song, song_name) %>% \n  summarize(mean_afinn = mean(value)) # find mean sentiment value per song\n\nggplot(data = act1_afinn_means, # specify data\n       aes(x = fct_rev(factor(song_name)), y = mean_afinn)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip coordinates\n  labs(title = \"Mean Afinn Sentiment Scores by Song in Hamilton: Act 1\", # add title\n       x = \"Song\", # add x-axis label\n       y = \"Mean Afinn Score\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 11. Mean Afinn Sentiment Scores by Song in Hamilton: Act 1. Overall, the song with the lowest Afinn score is Alexander Hamilton; the song with the higest is Satisfied.\nAct 2 Mean\n\n\nact2_afinn <- words_act2_clean %>% \n  inner_join(get_sentiments(\"afinn\"), by = \"word\") # get sentiments for act \n\nact2_afinn_means <- act2_afinn %>% \n  group_by(song, song_name) %>% \n  summarize(mean_afinn = mean(value)) # find mean sentiment values for Act 2\n\nggplot(data = act2_afinn_means, # specify data \n       aes(x = fct_rev(factor(song_name)), y = mean_afinn)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip coordinates\n  labs(title = \"Mean Afinn Sentiment Scores in Hamilton: Act 2\", # add title\n       x = \"Mean Afinn Score\", # add x-axis label\n       y = \"Song\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 12. Mean Afinn Sentiment Scores by Song in Hamilton: Act 2. Overall, the song with the lowest Afinn score is The Adams Administration; the song with the highest is We Know.\n‚ÄúNRC‚Äù lexicon\nAct 1\n\n\nact1_nrc <- words_act1_clean %>% \n  inner_join(get_sentiments(\"nrc\")) # find nrc sentiments\n\n\nSongs 1-6\n\n\nact1_nrc_1_6 <- act1_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) # select songs 1-6\n  \nggplot(data = act1_nrc_1_6, #specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 1-6 in Hamilton: Act 1\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 13. NRC Sentiments of Songs 1-6 in Hamilton: Act 1. Of these 6 songs, My Shot has the most amount of sentimental words, while The Story of Tonight has few.\nSongs 7-12\n\n\nact1_nrc_7_12 <- act1_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"7\", \"8\", \"9\", \"10\", \"11\", \"12\")) # choose songs 7-12\n  \nggplot(data = act1_nrc_7_12,\n       aes(x = sentiment, y = n)) +\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 7-12 in Hamilton: Act 1\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 14. NRC Sentiments in Songs 7-12 in Hamilton: Act 1. Of these 6 songs, Satisfied and Right Hand Man has the most amount of positive sentimental words. The Story of Tonight (Reprise) has few sentimental words.\nSongs 13-18\n\n\nact1_nrc_13_18 <- act1_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"13\", \"14\", \"15\", \"16\", \"17\", \"18\")) # choose songs 13-18\n  \nggplot(data = act1_nrc_13_18, # specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 13-18 in Hamilton: Act 1\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 15. NRC Sentiments in Songs 13-18 in Hamilton: Act 1. Of these 6 songs, Wait for It has the most amount of negative sentimental words. The other 5 songs do not lean too heavily on any of the sentiments.\nSongs 19-23\n\n\nact1_nrc_19_23 <- act1_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"19\", \"20\", \"21\", \"22\", \"23\")) # choose songs 19-23\n  \nggplot(data = act1_nrc_19_23, # specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentimens in Songs 19-23 in Hamilton: Act 1\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 16. NRC Sentiments in Songs 19-23 in Hamilton: Act 1. Of these 5 songs, Non-Stop has the most amount of words that fall in these sentiment categories. History Has Its Eyes On You and What Comes Next? is very neutral in word sentiment content.\nAct 2\n\n\nact2_nrc <- words_act2_clean %>% \n  inner_join(get_sentiments(\"nrc\")) # find nrc sentiments\n\n\nSongs 1-6\n\n\nact2_nrc_1_6 <- act2_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) # choose songs 1-6\n  \nggplot(data = act2_nrc_1_6, # specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 1-6 in Hamilton: Act 2\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 17. NRC Sentiments in Songs 1-6 in Hamilton: Act 2. Of these 6 songs, most have high sentiment word content. Schuyler Defeated appears to have a lack of words that fall in any of these sentiment categories.\nSongs 7-12\n\n\nact2_nrc_7_12 <- act2_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"7\", \"8\", \"9\", \"10\", \"11\", \"12\")) # choose songs 7-12\n  \nggplot(data = act2_nrc_7_12,\n       aes(x = sentiment, y = n)) +\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 7-12 in Hamilton: Act 2\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 18. NRC Sentiments in Songs 7-12 in Hamilton: Act 2. Of these 6 songs, One Last Time has the most number of words in the good sentiments. The songs I Know Him, Washington on Your Side, and The Adams Administration appear to be neutral amongst all the entiment columns.\nSongs 13-18\n\n\nact2_nrc_13_18 <- act2_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"13\", \"14\", \"15\", \"16\", \"17\", \"18\")) # choose songs 13-18\n  \nggplot(data = act2_nrc_13_18, # specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 13-18 in Hamilton: Act 2\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 19. NRC Sentiments in Songs 13-18 in Hamilton: Act 2. Of these 6 songs, Hurricane had the highest word count for the negative sentiment. The songs Blow Us All Away, It‚Äôs Quiet Uptown, and The Reynolds Pamphlet each appear to have large word counts in the positive sentiment, as well as high counts in other sentiments as well.\nSongs 19-23\n\n\nact2_nrc_19_23 <- act2_nrc %>% \n  count(song, song_name, sentiment) %>% \n  filter(song %in% c(\"19\", \"20\", \"21\", \"22\", \"23\")) # choose songs 19-23\n  \nggplot(data = act2_nrc_19_23, # specify data\n       aes(x = sentiment, y = n)) + # define parameters\n  geom_col(fill = \"#f6c049\", color = \"#a8a7a7\") + # define column graph and change colors\n  coord_flip() + # flip axes\n  facet_wrap(~song_name) + # separate by song\n  labs(title = \"NRC Sentiments in Songs 19-23 in Hamilton: Act 2\", # add title\n       x = \"Word Count\", # add x-axis label\n       y = \"Sentiment\") + # add y-axis label\n  theme(plot.title = element_text(hjust = 0.5), # center title\n        panel.background = element_rect(color = \"#404040\"), # outline panel\n        plot.background = element_rect(fill = \"snow\")) # color plot background\n\n\n\nFigure 20. NRC Sentiments in Songs 19-23 in Hamilton: Act 2. Of these 5 songs, 4 of the 5 have no specific sentiments that are easily noticed. The Election of 1800 appears to have the largest word count in the positive sentiment category in comparison to the other 4 songs.\nKey Takeaways\nWhile these analyses do a good job at determining opinions, emotions, and attitudes in the text, there are limitation to these methods. The largest one is the lack of context the computer program has when looking at each of these different songs word-by-word. Some of the songs presented were given very positive sentimental ratings based on word content, when in fact, the usage of the words contradicted this analysis. It is likely that this type of analysis would likely work better with interpreting more formal types of writing than something that is much harder to understand without context.\nData Citation\nMiranda, L. (2016). Hamilton: an American musical. In J. McCarter (Ed.), Hamilton: the revolution (pp.¬†23-26). Grand Central Publishing.\n\n\n\n",
    "preview": "posts/2022-03-21-hamilton/hamilton_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2023-01-14T10:12:58-08:00",
    "input_file": {}
  },
  {
    "path": "posts/",
    "title": "Sea Level Changes of Mono Lake in Lee Vining, California",
    "description": "My Data Visualization Skills on Display",
    "author": [
      {
        "name": "Kiera Matiska",
        "url": {}
      }
    ],
    "date": "2021-11-27",
    "categories": [],
    "contents": "\n\n\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\n# Attach packages\nlibrary(tidyverse)\nlibrary(here)\nlibrary(janitor)\nlibrary(scales)\nlibrary(dplyr)\n\n\n\n\n\nmono_lake <- read_csv(here(\"data\", \"mono_lake_annual_levels1.csv\"), skip = 5) %>% # read in data\n  clean_names() # changed column headers to lower_snake_case\n\n\n\n\n\nggplot(data = mono_lake, # call ggplot to make a funtion using the mono_lake data frame\n       aes(x = year, y = lake_level_feet_above_sea_level)) + # define x and y axis\n  geom_point(color = \"steelblue4\") + # specify scatterplot and change point color\n  scale_x_continuous(breaks = pretty_breaks(n = 16)) + # axis break every 10 years\n  labs(title = \"Lake Level Changes in Mono Lake from 1850 to 2017\", # title label\n       x = \"Year\", # x-axis label\n       y = \"Lake Level (feet above sea level)\") + # y-axis label\n  theme_light() + # changed theme\n  theme(plot.background = element_rect(fill = \"lightskyblue2\"), # changed color\n        panel.background = element_rect(fill = \"white\"), # changed color\n        panel.grid.major = element_line(color = \"gray77\"), # changed color\n        plot.title = element_text(hjust = 0.5), # centered title\n        legend.position = \"none\") + # removed legend\n  geom_segment(aes(x = 1958, y = 6427, xend = 1921, yend = 6427, color = \"red\"), # defined constraints\n               arrow = arrow(length = unit(0.8, \"mm\"))) + # added upper arrow\n  geom_segment(aes(x = 1942, y = 6374, xend = 1979, yend = 6372, color = \"red\"), # defined constraints\n               arrow = arrow(length = unit(0.8, \"mm\"))) + # added lower arrow\n  geom_segment(aes(x = 1939, y = 6410, xend = 1941, yend = 6416, color = \"red\"), # defined constraints\n               arrow = arrow(length = unit(0.8, \"mm\"))) + # added first key date arrow\n  geom_segment(aes(x = 1981, y = 6385, xend = 1978.5, yend = 6376, color = \"red\"), # defined constraints\n               arrow = arrow(length = unit(0.8, \"mm\"))) + # added second key date arrow\n  geom_segment(aes(x = 1996, y = 6395, xend = 1994, yend = 6375.6, color = \"red\"), # defined constraints\n               arrow = arrow(length = unit(0.8, \"mm\"))) + # added third key date arrow\n  geom_hline(yintercept = 6377) + # added horizontal line\n  geom_hline(yintercept = 6392) + # added horizontal line\n  annotate(\"text\", x = 1967, y = 6427, \n           label = \"High: 6,427 ft\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1931, y = 6374, \n           label = \"High: 6,372.30 ft\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1935, y = 6408, \n           label = \"1941: Lake water \\n diverted to Los Angeles\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1983, y = 6388, \n           label = \"1978: Mono Lake \\n Committee formed\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1996, y = 6398, \n           label = \"1994: Decision \\n 1631 Passed\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1890, y = 6378.5, \n           label = \"Land Bridge Forms\", size = 2.5) + # added text on graph\n  annotate(\"text\", x = 1890, y = 6393.5, \n           label = \"Decision 1631: Lake Level Compromise of 6,392 above Sea Level\", size = 2.5) # added text on graph\n\n\n\n\nFigure 1. Lake Level Changes in Mono Lake from 1850 to 2017. Located northeast of Yosemite National Park in Lee Vining, California, Mono Lake is home to a plethora of different plant and animal species. Throughout the recorded years, 1918 and 1919 had the highest lake level of 4,627 feet above sea level and 1981 had the lowest (around 6,372,30 feet above sea level). When considering wildlife distribution in the area, it is imperative to look at the lake level. Most years have lake levels upwards of 6,377 feet above sea level. When the water level is, at maximum, this high, land bridges are formed that allow predators to attack the bird species that occupy and nest on the island in the center of the lake. In 1941, water from this lake was diverted to Los Angeles to provide a source of clean water for the population there. This decreased the volume of the lake and resulted in the low lake level that allowed the land bridge to form. Once the Mono Lake Committee was formed in 1978, lake levels have started to rise again, minimizing the risk of the land bridge forming and protecting bird species nesting on the island.\n\n\n\n",
    "preview": "posts/2022-02-16_Seawater_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2022-03-19T14:22:24-07:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-06-welcome/",
    "title": "Snowshoe Hare Analysis",
    "description": "Statistical Analysis on Different Variables Collected on Snowshoe Hares",
    "author": [
      {
        "name": "Kiera Matiska",
        "url": {}
      }
    ],
    "date": "2021-11-05",
    "categories": [],
    "contents": "\nIntroduction\nIn Alaska, Bonanza Creek is populated with snowshoe hares. Snowshoe hares are a keystone species in northern boreal forests and are therefore crucial to other species living within the same habitat (Kielland et al., 2017). They are important as prey for larger ground and air animals and can also do a lot of damage to vegetation if their population gets too large (National Parks Service, 2021). Due to lack of quantitative descriptions of hare population changes, this data was collected via capture-recapture strategies to count the population of hares in this creek. In this report, I use statistical tests and analyses to describe the changes in juvenile hare populations over 12 years (from 1999 - 2012).\nData and Analyses\nThe data set used in this report has 3197 observations of hare individuals between three sites. These sites are Bonanza Riparian, Bonanza Mature Forest, and Bonanza Lowland Mature Forest. Each observation contains data on the age, sex, weight (g), hind foot length (mm), site, left and right ear tags, date, and trap ID. For this report, calculations using t-tests (significance level: (\\(\\alpha\\)) = 0.05) and linear regression test are used to determined difference between means and the relationship between hind foot length and weight, respectively. Additionally, a Cohen‚Äôs d test is used to determine relationship effect size between hind feet length and weight and a Pearson‚Äôs r tests to determine the variance in the same relationship. Data is represented clearly in a summary table (with mean weight, median weight, standard deviation, minimum and maximum weights, and sample size) and over a multitude of different graphs. Statistical analyses are done using R coding language in RStudio.\n\n\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)\n\n# Attach Packages\nlibrary(tidyverse)\nlibrary(here)\nlibrary(lubridate)\nlibrary(kableExtra)\nlibrary(effsize)\nlibrary(broom)\n\n\n\n\n\n# Read in data\n# - Use `read_csv()` and the here package to read in bonanza_hares.csv\n\nhares <- read_csv(here(\"data\", \"bonanza_hares1.csv\")) # reads in data\n\n\n\n1. Annual Juvinile Hare Trap Counts\n\n\n# Data Wrangling\n\n# - Create a new column, year, using the `year()` function in lubridate\n# - Create a subset that only contains juvenile hare data\n# - Create a new data frame using the `summarize()` function that has two columns, year and number of hare traps\n# - Use `kable_styling()` to finalize the table\n\nhares_year <- hares %>% # stores new subset\n  mutate(date = mdy(date)) %>% # changes date column to class date\n  mutate(year = year(date)) # adds a new column with just year\n\nhares_juvenile <- hares_year %>% # stores new subset\n  filter(age == \"j\") # filters out observations in the age column that is not \"j\"\n\nhares_traps <- hares_juvenile %>% # stores a new subset\n  select(year, age) %>% # selects only columns age and year\n  group_by(year) %>% # groups the subset by year\n  summarize(number = n()) # creates a summary table with only year and number of traps for juvenile hares\n\nhares_traps %>% # finalize this table\n  kbl(caption = \"Table 1. Number of Juvenile Hare Traps Each Year from 1999 - 2012\") %>% # adds a caption\n  kable_styling()\n\n\n\nTable 1: Table 1. Number of Juvenile Hare Traps Each Year from 1999 - 2012\n\n\nyear\n\n\nnumber\n\n\n1999\n\n\n126\n\n\n2000\n\n\n67\n\n\n2001\n\n\n22\n\n\n2003\n\n\n18\n\n\n2004\n\n\n8\n\n\n2005\n\n\n48\n\n\n2006\n\n\n13\n\n\n2007\n\n\n5\n\n\n2008\n\n\n44\n\n\n2010\n\n\n2\n\n\n2011\n\n\n19\n\n\n2012\n\n\n6\n\n\n\n\nggplot(data = hares_traps, # identifies data set\n       aes(x = year, y = number)) + # sets x and y axis\n  geom_col(color = \"gray\", fill = \"darkblue\") + # makes a column graph and adds color to data\n  scale_x_continuous(breaks = 1999:2012) + # add each year label under observations\n  labs(x = \"Year\", # titles x-axis\n       y = \"Number of Traps\") + # titles y-axis\n  theme(plot.background = element_rect(fill = \"lavender\"), # changes the plot background color\n        panel.background = element_rect(fill = \"white\"), # changes the panel background color\n        panel.grid.major = element_line(color = \"gray85\")) # change color of lines on the panel\n\n\n\n\nFigure 1. Annual Counts of Juvenile Hare Traps in Bonanza Creek. Sample size is 378 traps.\nThe maximum and minimum amount of Juvenile Hare Trappings are 126 (in 1999) and 2 (in 2009) respectively. The median number of traps is 18.5 and the mean value is 31.5. These two values show that there has been a substantial decrease in traps since 1999. Hence, after 1999, the general trend of juvenile traps is negative, meaning that overall, the trap counts decrease from the first year onward. On the other hand, these numbers are highly influenced by effort, or the amount of time the researchers put into trapping and re-trapping these hares. By documenting the number of days in the field for a single year and then repeating that annually may lead to clearer results.\n2. Juvenile Hare Weights\n\n\n# Data Wrangling\n\n# - Using `mutate()`, rename the sex variables so they are spelled out: m = male, f = female, \n# and NA = not applicable\n# - Using `mutate()`, rename the grid variables so they are spelled out: \n# bonrip = Bonanza Riparian, bonmat = Bonanza Mature, bonbs = Bonanza Lowland Mature\n# - Create new data frame, hare_weights, using the `select()` \n# function so that it contains only hare weights, sex, and grid site.\n\nhares_sex <- hares_juvenile %>% # stores new subset\n  mutate(sex = case_when( # renames variables in the sex column\n    sex == \"m\" ~ \"male\", \n    sex == \"f\" ~ \"female\",\n    is.na(sex) == TRUE ~ \"N/A\" # changes NA filler variables to N/A for not applicable\n  ))\n\nhare_grids <- hares_sex %>% # stores new subset\n  mutate(grid = case_when( # renames variables in grid column\n    grid == \"bonrip\" ~ \"Bonanza Riparian\",\n    grid == \"bonmat\" ~ \"Bonanza Mature\",\n    grid == \"bonbs\" ~ \"Bonanza Lowland Spruce\"\n  ))\n\nhare_weights <- hare_grids %>% # stores a new subset\n  select(weight, sex, grid) # with only these columns\n\n\n\n\n\nhare_weights_size1 <- hare_weights %>% \n  select(sex, grid, weight) %>% \n  group_by(grid, sex) %>% \n  summarize(sample_size = n(),\n            mean = mean(weight, na.rm = TRUE))\n\nhare_weights_size2 <- hare_weights %>% \n  select(sex, grid) %>% \n  group_by(grid) %>% \n  summarize(sample_size = n())\n\n\n\n\n\nggplot(data = hare_weights, # identifies data set\n       aes(x = sex, y = weight)) + # sets x and y variables\n  geom_point(size = 0.8, aes(color = sex)) + # scatter plot with colors based on sex size change of each point\n  facet_grid(~ grid) + # separate data on graph by site\n  labs(x = \"Sex\", # x-axis label\n       y = \"Weight (g)\") + # y-axis label\n  theme(legend.position = \"none\", # removes legend\n        plot.background = element_rect(fill = \"lavender\"), # changes the plot background color\n        panel.background = element_rect(fill = \"white\"), # changes the panel background color\n        panel.grid.major = element_line(color = \"gray85\")) # change color of lines on the panel\n\n\n\n\nFigure 2. Juvenile Hare Weights (g) by Sex in Each Bonanza Creek Site Zone. The first site (‚ÄòBonanza Lowland Spruce‚Äô) is the site used for monitoring abundance and survival of snowshoe hares via live-trapping them. The second site (‚ÄòBonanza Mature‚Äô) consists of mature white spruce, alder, paper birch, and black spruce trees. The last site (‚ÄòBonanza Riparian‚Äô) is the flood zone area of the creek nearby the Tanana River and the Bonanza Mature Black Spruce. The sample sizes of each of the three sites respectively are: 49 hares, 83 hares, and 246 hares.\nOn average, female juvenile hares are smaller than male hares. In each site, male hares are roughly 15 g larger in site 1, 142 g in site 2, and 105 g in site 3. Hares are the largest, on average, in site 1. Additionally, each site has different size populations of juvenile hares based on this trapping data. The smallest population is in the Lowland Bonanza Mature site (49 hares) and the largest population is in the Bonanza Riparian site (246 hares).\n3. Juvenile Weight Comparisons (male and female snowshoe hares)\n\n\n# Wrangle Data\n# Create a data subset, `weight_hare` with only the variables sex and weight\n\nweight_hare <- hares_sex %>% # stores a new subset\n  select(sex, weight) %>% # with only these columns\n  filter(sex %in% c(\"male\", \"female\")) # without NA data\n\n\n\n\n\nhare_summary <- weight_hare %>% # stores a summary table\n  group_by(sex) %>% # group by sex\n  summarize(min_weight_g = min(weight, na.rm = TRUE), # adds min weight for both sexes\n            max_weight_g = max(weight, na.rm = TRUE), # adds max weight for both sexes \n            mean_weight = round(mean(weight, na.rm = TRUE), 2), # mean the weight, remove NA values \n            median_weight_g = median(weight, na.rm = TRUE), # gives the middle value of both sexes\n            sd = round(sd(weight, na.rm = TRUE), 2), # standard deviate the weight, remove NA values\n            sample_size = n()) # calculate sample size\n\nhare_summary %>% # finalize summary table\n  kbl(col.names = c(\"Sex\", # changes column headers\n                    \"Minimum Weight (g)\",\n                    \"Maximum Weight (g)\",\n                    \"Mean Weight (g)\",\n                    \"Median Weight (g)\",\n                    \"Standard Deviation\",\n                    \"Sample Size\"),\n    caption = \"Table 1: Mean, Standard Deviation, and Sample Sizes of Weights by Sex of Juvenile Hares\") %>% # add a caption\n  kable_styling()\n\n\n\nTable 2: Table 1: Mean, Standard Deviation, and Sample Sizes of Weights by Sex of Juvenile Hares\n\n\nSex\n\n\nMinimum Weight (g)\n\n\nMaximum Weight (g)\n\n\nMean Weight (g)\n\n\nMedian Weight (g)\n\n\nStandard Deviation\n\n\nSample Size\n\n\nfemale\n\n\n275\n\n\n1620\n\n\n855.39\n\n\n825\n\n\n292.25\n\n\n200\n\n\nmale\n\n\n350\n\n\n1650\n\n\n945.86\n\n\n990\n\n\n333.22\n\n\n163\n\n\n\n\n# Create vectors of hare weights \nweight_males <- hares_sex %>% # Stores a vector\n  filter(sex == \"male\") %>% # with only male observations\n  drop_na(weight) %>% # dropping weights with NA stored\n  pull(weight) # separates weight values into vector\n\nweight_females <- hares_sex %>% # stores a vector\n  filter(sex == \"female\") %>% # with only male observations\n  drop_na(weight) %>% # dropping weights with NA stored\n  pull(weight) # separates weight values into vector\n\n\n\n\n\n#Perform a t-test and cohen's d test on the data\n# Use `t.test()` to run the test and find significance of the data. Use `cohen.d()` to run a cohens d test.\n\nweight_ttest <- t.test(weight_males, weight_females) # conduct t-test\n\nweight_cohen <- cohen.d(weight_males, weight_females) # conduct cohen d's test -> Small effect size\n\n\n\nBetween male and female juvenile hares, on average, male hares are larger than female hares by 91 grams. The effect size was small based on the Cohen‚Äôs d value of 0.2904674 and the unpaired t-test resulted in a p-value of 0.0070933. This p-value means that there is a 0.7093279% chance of finding sample means that are at least this different if drawn, by random chance, from populations with the same mean weight.\n4. Relationship Between Juvenile Weight and Hind Foot Length\n\n\n# Data Wrangling\n# Create a new subset that consists of only juvenile hares, weights, and hind foot lengths in mm\n\nweight_hind <- hares_juvenile %>% # stores new subset\n  select(weight, hindft) # with only these columns\n\n\n\n\n\nggplot(data = weight_hind, # select this data\n       aes(x = hindft, y = weight)) + # selects x and y variables\n  geom_point(color = \"springgreen4\") + # scatter plot with green points\n  labs(x = \"Weight (g)\", # x-axis label\n       y = \"Hind Foot Length (mm)\") + # y-axis label\n  theme(plot.caption = element_text(hjust = 0), # positions figure label to the bottom left of the graph\n        plot.background = element_rect(fill = \"lavender\"), # changes the plot background color\n        panel.background = element_rect(fill = \"white\"), # changes the panel background color\n        panel.grid.major = element_line(color = \"gray85\")) # change color of lines on the panel\n\n\n\n\nFigure 3. Weight versus Hind Foot Length of Juvenile Hares. Weight is in grams and hind foot length is in millimeters. Sample size is 378 individuals.\n\n\n# Statistical Testing\n\nweight_hind_lm <- lm(weight ~ hindft, data = weight_hind) # run a linear regression test\n\nweight_hind_tidy <- tidy(weight_hind_lm) # Shows lm stats\n\nweight_hind_glance <- glance(weight_hind_lm)\n\nweight_hind_pearsons <- cor.test(weight_hind$weight, weight_hind$hindft) # Pearson's R Test\n\n\n\nFor this section on the relationship between weight (g) and hind foot length (mm), it appears that there is a positive correlation between hind foot length and weight. For the linear regression model test, the hind foot coefficient is 9.52. This value means that with every 1 mm increase in hind foot length, the weight of the hare increases by 9.52 grams on average. Additionally, the R^2 value is 0.299. The meaning of this value is that 29.9% of variance in hare weight is explained by hind foot length. The Pearson‚Äôs r value of 0.55 means that there is a moderate correlation between hind foot length and hare weight. The assumptions of linear regression that may be of concern from this is homoscedesticity because the variances are unequal meaning that the variances of this relationship is actually heteroscedastic.\nSummary\nTo summarize this report, we found:\nthat hare traps decreased from 1999 to 2012, showing a possible decrease in effort of the trapping and re-capturing program of snowshoe hares\nthat there was a higher abundance of hares among the Bonanza Riparian Site\nthat female juvenile hares were, on average, slightly smaller than male juvenile hares\nthat there is a moderate, positive correlation between hind foot length (mm) and snowshoe hare weight (g)\nCitations\nDavid Robinson, Alex Hayes and Simon Couch (2021). broom: Convert Statistical Objects into Tidy Tibbles. R package version 0.7.9. https://CRAN.R-project.org/package=broom\nGarrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy with lubridate. Journal of Statistical Software, 40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.\nHao Zhu (2021). kableExtra: Construct Complex Table with ‚Äòkable‚Äô and Pipe Syntax. R package version 1.3.4. https://CRAN.R-project.org/package=kableExtra\nKielland, K., F.S. Chapin, R.W. Ruess, and Bonanza Creek LTER. 2017. Snowshoe hare physical data in Bonanza Creek Experimental Forest: 1999-Present ver 22. Environmental Data Initiative. https://doi.org/10.6073/pasta/03dce4856d79b91557d8e6ce2cbcdc14\nKirill M√ºller (2020). here: A Simpler Way to Find Your Files. R package version 1.0.1. https://CRAN.R-project.org/package=here\nNational Parks Service. 2021. NETN Species Spotlight - Snowshoe Hare. National Parks Service. https://www.nps.gov/articles/netn-species-spotlight-snowshoe-hare.htm\nR Core Team (2021). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.\nRStudio Team (2021). RStudio: Integrated Development Environment for R. RStudio, PBC, Boston, MA URL http://www.rstudio.com/.\nTorchiano M (2020). effsize: Efficient Effect Size Computation. doi: 10.5281/zenodo.1480624 (URL: https://doi.org/10.5281/zenodo.1480624), R package version 0.8.1, <URL: https://CRAN.R-project.org/package=effsize>.\nWickham et al., (2019). Welcome to the tidyverse. Journal of Open Source Software, 4(43), 1686, https://doi.org/10.21105/joss.01686\n\n\n\n",
    "preview": "posts/2022-02-06-welcome/welcome_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2022-03-19T14:23:13-07:00",
    "input_file": {}
  }
]
